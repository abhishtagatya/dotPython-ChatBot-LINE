{
  "lesson":{
    "syntax" : {
      "menu_option" : "Choose the available lessons : \n + Variable (var) \n + Boolean (bool) \n + Reassignment (reassign) \n + Comments (comment) \n + Operators (operator) \n + Data Type (type)",
      "description" : "SYNTAX\n\n Syntax means the arrangements of words and phrases to create a well-formed sentence in a language. In computer science, syntax is a computer set of rules or commands that in combination and structure to create a program or execute a command. Syntax in python is really simple compared to C and Java, but there are some rules in play to keep your code well written and clean.",
      "variable" : "VARIABLE \n\nIn programming, a variable is a value or data that can change / manipulated depending on conditions or informations that is passed on the program. Variables in python can store various data types like numbers, strings, boole or even a variable it self and many more types. This helps programmer to keep track of things and make it easier for them to change around and operate with data. For more informations about variables in python, click here www.tutorialspoint.com/python/python_variable_types.htm \n\nExample : pi = 3.14",
      "boolean" : "BOOLEAN \n\nA boolean is a data type that only has two values, which is True or False, think of it as a Light Switch, its either on or off. Booleans can be stored in a variable, just like any data types. Booleans are commonly used to evaluate a condition and it can be operated as well.\n\nExample : \nwhile True:\n\tprint 'dotPython!'",
      "reassign" : "REASSIGN \n\nReassignment of variable is a way to manipulate data easily.\n\nExample : \nstatus = 'Sad'\nstatus = 'Happy'\n\nNow the variable called status has changed from sad to happy because we reassign the variable in the next line.",
      "comment" : "COMMENTS \n\nComments are a way to make your program easier to understand by putting texts with (#) for single line comments and (\"\"\") for multi line comments.\n\nExample :\n # This is a comment!",
      "operator" : "OPERATOR \n\nOperators are symbols that programs used for an operation or data manipulation. We will divide operators into 3, unary, binary and ternary. Unary operators only consists of one operand (Example : -a ), binary operators consists of 2 operands (Example : a + b) and ternary operations consists more than 2 operands (Example : (a + b) < c ). There are many operators and how to use them, click here to know more\n www.programiz.com/python-programming/operators",
      "data_type" : "DATA TYPES\n\nPython is smart when it comes to data types. Unlike low level programming language, where you have to define what that data type is inside a variable, python does it for you. You can check what that data type is using the 'type()' built-in function. We will focus on Numeric data type in this course, python has 3 numeric basic data type thats used to do various mathematic operations. There are intergers (int) what is known as round numbers (123), float (float) that is known as fractions, using decimal points and complex numbers (5j). To learn more about data types, click here\nhttp://developer.rhino3d.com/guides/rhinopython/python-datatypes/ "
    },
    "strings" : {
      "menu_option" : "Choose the available lessons : \n + String Index (index) \n + String Operate (operate) \n + String Function (func) \n + String Formatting (format) \n + String Input (input) \n + Typecasting (typecast)",
      "description" : "STRINGS\n\nStrings are an array or sequence of characters. In python it is really easy to create a string, simply by using the (\"\") double quote or single quote. Example : \"This is a string\". A string is also a data type in Python and can be assign and operated in variables and functions. Lets learn what strings are all about!",
      "str_index" : "STRING INDEX\n\nIndex is used to specify the elements of an array. Index in strings is the position of a character inside the string.\n\n For example : var = \"String\"\n\n has a length of 6 because it contains 6 characters and the index of zero is \"S\". It might be confusing at first glance but if we check it with the function 'len()' to check the length of the string we get the number 6. If we check the index of 0, For example 'var[0]' it will output \"S\". Why is that? Because arrays starts from 0, so that means the index limit of this string must be 5, because the index 5 is the last character and going beyond that would give us an 'IndexError'. For more informations on this topic, click here http://do.co/2lnVTOW",
      "str_operate" : "STRING OPERATE\n\nStrings can be operated to be added by a different string or even changed around and deleted. Here is how we do it,\n\nExample :\nname = \"{0}\"\nstatus = \"{1}\"\nprint name + \" is \" + status\n\nwill output as \"{0} is {1}\". We just combined two strings from 3 all together in the print function. Lets say you want to delete that string, you can assign an empty string to it.\n\nExample : name = \"\"\nif you try to print name, it will print a blank. For more informations, click here http://bit.ly/2C7hGWf",
      "str_func" : "STRING FUNCTIONS\n\nString functions are functions that operates a string and returns it based on the operations. An easy example is the upper() and lower() functions built in, it outputs the string as uppercases and lowercases. There are also the join(), split() and replace() methods and many more. To learn more depth to string functions, click here http://do.co/2lnVTOW",
      "str_format" : "STRING FORMATTING\n\nString formatting is a way to slip in strings inside a string so that the string doesn't always output the same thing, it can change if the variables change as well.\n\nExample :\nname = \"dotPython\"\nprint \"%s is happy\"\n\n it will print out my variable 'name' is happy, lets say I want to print your name instead, so lets reassign it.\n\nExample :\nname = \"{0}\"\nit will print out \"{0}\" is happy. To learn more, click here http://bit.ly/2Ciuh8o",
      "str_input" : "STRING INPUTS\n\nInputs are putting data to a computer, it may vary but we will discuss about string inputs. You can get input for your program from the user using the console and the 'input()' and 'raw_input()' methods. Lets say you want to get the name and age of the user.\n\nExample :\nname = input()\nage = input()\n\nIt will assign that variable to what ever the user typed it in. There is lots more to inputs, click here to know more http://bit.ly/2zLjs9L",
      "typecast" : "TYPECAST\n\nTypecasting is a way to convert a data type to another data type by using its type function, when doing this pay attention, because some data types when converted can cause an error.\n\nExample :\npi = 3.14\nstr(pi)\n\nthe variable 'pi' was a float, but then it was converted into a string and can be operated as a string and not a numeric data type. So if we say 'str(pi) + 1' will give us an error, but 'float(pi) + 1' will not. To learn more about typecasting, click here http://bit.ly/2CaTzpJ"
    },
    "data_structure" : {
      "menu_option" : "Choose the available lessons : \n + List (list) \n + Tuple (tuple) \n + Dictionary (dict) \n + Sets (sets) \n + Frozensets (fsets)",
      "description" : "DATA STRUCTURE\n\nData structures are basically just that, they are structures which can hold some data together. There are a quite a few data structures available in Python. The built-in data structures are list, tuple, dictionary, strings, sets and frozensets. We will learn to manipute these data structures so that you can operate them as your liking. Unlike C and Java, Python made it very easy to create one. So lets go over them each with an example. Lets go!",
      "list" : "LIST\n\nA list is a data structure that holds an ordered collection of items, meaning you can store a sequence of items in a list. This is easy to imagine if you can think of a shopping list where you have a list of items to buy, a list is just that.\n\nExample :\nfood = ['burger','fries','chicken','pizza']\ndrinks = ['tea','water','coffee']\n\nNow what we can do is check the length of that list by using the 'len()' function. So the length of 'food' is 4 and 'drink' is 3. You can do lots of things in lists and various functions as well. You can add items or even delete them using the 'append()' and 'pop()' functions. Click here to learn more about lists http://bit.ly/2DwvZQy\nhttp://bit.ly/2zMh02z",
      "tuple" : "TUPLE\n\nTuples are used to hold together multiple objects. Think of them as similar to lists, but without the extensive functionality of a list gives you. One major feature of tuples is that they are immutable, meaning you cannot modify tuples unless you edit the code it self.\n\nExample :\nmusic_genre = ('pop','hip hop','rap','rock','jazz')\n\nWe can access tuples just like how we access lists, but keep in mind that tuples cannot only contain one element. A way to get by that is using a trailing-comma like this\n\nExample :\nsingle = ({0},)\n\n To learn more about tuple, click here http://bit.ly/2DwvZQy",
      "dict" : "DICTIONARY\n\nA dictionary is self explained, you got the word you want to translate, in this case the key and the translated word in this case the value. So a dictionary holds a key and a value, and if you have that key you can get the value.\n\nExample :\nemail = {'you' : 'you@mail.id', 'dotp' : 'dotp@mail.com'}\n\nYou can access the value by giving the key\n\n print email['dotp']\n\nThis will print out 'dotp@mail.com' and if we were to change the value, we can reassign it with the key\n\nemail['dotp']='dotp@example.id'\n\nYou can learn more about dictionaries here http://bit.ly/2DwvZQy",
      "sets" : "SETS\n\nSets are unordered collections of simple objects. These are used when the existence of an object in a collection is more important than the order or how many times it occurs. You can also use subset of another set, find the intersection between the two sets.\n\nExample : set('pythoniscool')\n\nThis if printed, will output very strange, the output will be\n\n'set(['c', 'i', 'h', 'l', 'o', 'n', 'p', 's', 't', 'y'])'\n\nThis is because it splits them in to arrays for every characters and if there is two of the same characters in the set, it will not be shown. Sets are very useful because of its functions, click here to learn more about sets http://bit.ly/2DwvZQy\nhttp://bit.ly/2Cpo9sD",
      "frozensets" : "FROZENSETS\n\nFrozensets are the same as sets, but they are immutable. Sets lets you add an element to it or even change or delete an element inside of it, but frozensets dont.\n\nExample :\ncities = frozenset(['Jakarta'],['Tokyo'],['Seoul'])\n\nSo frozensets are static while sets are dynamic. If you tried to add or delete elements in a frozenset, you will get an' AtrributeError'. To learn more about frozensets, click here http://bit.ly/2Cpo9sD"
    },
    "loops_cond" : {
      "menu_option" : "Choose the available lessons : \n + While Loops (while) \n + For loops (for) \n + If/Else Statement (if_else) \n + Nested (nested) \n + Breaks and Continues (bnc)",
      "description" : "LOOPS AND CONDITIONS\n\nLoops are sequence of instructions that is continously repeating until a certain condition is reached. If the condition remains true, then the loop keeps on going until it reached false. Loops and conditions play a big role in every program, it tells when the program to start and stop at a certain point. Loops can go on forever, but a condition can stop them, so lets learn!",
      "while_loop" : "WHILE\n\nWhile loops will repeat as long as a certain condition (in booleans) is met. To run a while loop, the condition must remain True and stop when the condtion returns to False.\n\nExample :\nwhile True :\n\tprint 'the cake is a lie'\n\nthis will print out 'the cake is a line' forever with no end. This is because the condition will remain True no matter what. But what if we made a condition for it.\n\nExample :\ncount = 0\nwhile count < 5 :\n\tprint count\n\tcount += 1\n\nThis will print out the numbers 0 - 4 and will loop 5 times, because once the variable 'count' exceeds the number 5, the comparison operator will evaluate it as False. To learn more about loops, click here http://bit.ly/2CcjwoY",
      "for_loop" : "FOR\n\nThe for loops iterates over a given sequence. For loops can iterate over a sequence of numbers using the 'range()' function or even iterating over a data structure like lists.\n\nExample :\nprimes = [2,3,5,7]\nfor prime in primes:\n\tprint prime\n\nThis will iterate over the list of primes and the value of each index starting from 0 is given the variable as prime. We can also use the 'range()' function.\n\nExample :\nfor x in range(10):\n\tprint x\n\nThis will give us the numbers from 0 - 10. To learn more about for loops, click here http://bit.ly/2CcjwoY",
      "if_else" : "IF/ELSE\n\nIn order to write useful programs, we almost always need the ability to check conditions and change the behavior of the program. Conditional statements like if/else statements give us this ability. If the condition is True, then execute the statement of if, else then execute the statement of else.\n\nExample :\nnumber = {0}\nif number > 5:\n\tprint '{0} > 5'\nelse:\n\tprint {0} < 5\n\nthe statement that will be printed depends on the 'number', if it is bigger than 5 then it will say '{0} > 5', else its less than 5, it will say '{0} < 5'. Click here to learn more about if/else and how to evaluate the conditions http://bit.ly/2Cp3mp0\nhttp://bit.ly/2CcjwoY",
      "nested" : "NESTED LOOPS & CONDITIONS\n\nNested means they are bunched up or structured in a certain way. Take this for example.\n\nExample :\ncount = 0\nwhile True:\n\tif count % 2 == 0:\n\t\tprint 'even'\n\telse:\n\tprint 'odd'\n\tcount += 1\n\nThis is a simple odd and even program in python. The loop repeats the process over and over again and each loop checks the value of 'count' if its odd or even, then it will add 1 to the 'count' variable. You can modify this however you like with nesting the loops and conditions. Click here to learn more http://bit.ly/2Cp3mp0",
      "break_cont" : "BREAK & CONTINUE\n\nBreaks and continues are a way to control the program by breaking/continuing the condition or loop.\n\nExample :\ncount = 5\nwhile True:\n\tif count < 3:\n\t\tbreak\n\telse:\n\t\tcount -= 1\n\nThis loop will stop when the 'count' is lower than 3 because the loop is broken by the if statement. To learn more, click here http://bit.ly/2Cp3mp0"
    },
    "function" : {
      "menu_option" : "Choose the available lessons : \n + Declaring Function (declare) \n + Caliing Function (call) \n + Argument (arg) \n + Variable Scopes (varscope) \n + Nested Function (nested) \n + Decorator (decorator) \n + Overloading (overload) \n + Recursion (recursion) \n + Generator (generator) \n + Lambda Expression (lambda) ",
      "description" : "FUNCTION\n\nA function is a block of organized, reusable code that is used to perform a single, related action. Functions in python are declared using a the 'def' syntax followed by the name of the function declared. For example 'def foo():' is function with the name of 'foo' and no arguments in the parantheses. We will learn lots about functions, so lets go!",
      "declare" : "DEFINING\n\nWe declare a function quite easily in python. For example lets make an easy print a message function in python.\n\nExample :\ndef sayHello():\n\tprint 'Hello in function'\n\nWe just made a simple print message function in python with the name of 'sayHello'. If we run this block of code, nothing will happen just yet. Why? Because a function is useless if we dont call it somewhere after it is declared. It just organized the code into one keyword so that if we call it, the code will run.",
      "call" : "CALLING\n\nOnce a function has been defined, we can call it by its name. Calling a function activates lines of codes inside that fucntion. If we typed in 'sayHello()' function from the lesson before, it will output 'Hello in function'. We can even call another function inside another function and it will output the same.\n\nExample :\ndef sayHelloAgain():\n\tsayHello()\n\nNow if we call out both of these two functions, it will output 'Hello in function' twice. So functions are really convenient, it depletes repetition.",
      "argument" : "ARGUMENT\n\nSee that empty parantheses when declaring a function, lets add something to it. Lets change the 'sayHello()' function to make it greet to the your name.\n\nExample :\ndef sayHello(name):\n\tprint 'Hello ' + name\n\nNow it will greet to you, but you forgot to call the function after, so lets call it.\n\nsayHello('{0}')\n\nNow it will print out 'Hello {0}'. Arguments lets us pass in data by putting it in when we call it. There are four types of arguments, that is default, positional, keyword and variable-length arguments. You can learn all about it here, click http://bit.ly/2lHOqdP",
      "varscope" : "VARIABLE SCOPE\n\nIn general, variables that are defined inside a function body have a local scope, and those defined outside have a global scope. That means that local variables are defined within a function block and can only be accessed inside that function, while global variables can be accessed by all functions that might be in your script.\n\nExample :\ntotal = {0}\n\ndef localVar():\n\ttotal = {1}\n\tprint total\n\nYou see there are two different variable with the same name, but the one outside the function is called a global variable and the one inside it is a local variable. Now the function asks us to print the variable 'total'. It will print the value of the local variable. To learn more about variable scopes, click here http://bit.ly/2lHOqdP",
      "nested" : "NESTED FUNCTIONS\n\nNested function is similar to nested loops and conditions. You declare a function and then you declare another function inside of that.\n\nExample :\ndef outer():\n\tdef inner(a):\n\t\treturn a\n\treturn inner\n\nWe just declared a nested function. There are lots more about nested functions and methods to play around with it, recommended to learn it from here http://bit.ly/2EC5DxI",
      "decorator" : "DECORATOR\n\nDecorators wrap a function and modifying its behavior. Decorators dynamically alter the functionality of a function, method, or class without having to directly use subclasses or change the source code of the function being decorated. Python provides a syntatic sugar that allows simplification of doing this with the '@' symbol. Lets say we have a function that we want to alter and call it, in this case we will use the 'sayHello()' function to start simple.\n\nExample :\n@sayHello\ndef foo():\n\tpass\n\nNow if we run 'foo()' it will also run the 'sayHello()' function. This is convenient when working in a framework like Django and Flask so pay attention. Click here to learn more http://bit.ly/2AhO4Qm",
      "overloading" : "OVERLOADING\n\nOverloading a function is very similar to reassigning a variable. Once a function has been declared then it is altered / changed with some modification, that is called overloading. We will use the 'sayHello()' function as an example.\n\nExample :\ndef sayHello(name, lang='EN'):\n\tif lang == 'EN':\n\t\tprint 'Hello ' + name\n\telse:\n\t\tprint 'Language not recognized'\n\nWe have overloaded the 'sayHello()' function to print by the language passed in the argument. In this case, we have a default argument in 'lang'. Click here to learn more about overloading http://bit.ly/2DZtK8x",
      "recursion" : "RECURSION\n\nRecursions are a lot like loops, it repeats a blobk of code but using function by calling it self inside it.\n\nExample :\ndef endlessLoop():\n\tprint 'Escape is feudal'\n\tendlessLoop()\n\nThe function will print the string endlessly. We can limit the loop by passing in arguments and conditions just like a normal loop lets us. Recursions are very helpful to solve many mathematical problems. You can learn more about it here http://bit.ly/2CG5wUV",
      "generator" : "GENERATOR\n\nGenerators simplifies creation of iterators. A generator is a function that produces a sequence of results instead of a single value\n\nExample :\ndef yrange(n):\n\ti = 0\n\twhile i < n:\n\t\tyield i\n\t\ti += 1\n\nEach time the yield statement is executed the function generates a new value. So a generator is also an iterator The word “generator” is confusingly used to mean both the function that generates and what it generates. In this chapter, I’ll use the word 'generator' to mean the genearted object and 'generator function' to mean the function that generates it. Click here to learn more http://bit.ly/2CPgLqP",
      "lambda" : "LAMBDA\n\nWhat if we wanted to a short function that does a certain task? Well Python created an anonymous function (a function with no name unless its given) called lambda functions.\n\nExample :\nsquared = lambda x: x**2\n\nWe just created a lambda function with the argument of x and giving it the power of 2. We assigned this anonymous function to a variable, so then it can be called just like a normal function. Lambda functions can have any number of arguments but only one expression. The expression is evaluated and returned. Lambda functions can be used wherever function objects are required. Click here to learn more about lambda http://bit.ly/2ApNr7b"
    },
    "classobj" : {
      "menu_option" : "",
      "description" : "",
      "constructor" : "",
      "desctructor" : "",
      "cls_atrribute" : "",
      "obj_arg" : "",
      "encapsulation" : "",
      "inheritance" : "",
      "overriding_func" : ""
    }
  },
    "menu_option" : "Choose the available lessons : \n + Syntax (syn) \n + Strings and Console (str) \n + Data structure (dts) \n + Loops and Condition (loc) \n + Function (def) \n + Class and Objects (cls) ",
    "description" : "BASIC\n\nIn this course, we will go over the basics of python from syntax to functions and classes to help you write programs. Starting from the very basics so you can then apply your understanding and achieve in Python Programming. Good Luck!"
}
