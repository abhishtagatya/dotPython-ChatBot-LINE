{
  "lesson" : {
    "opening_file" : "OPENING FILE\n\nBefore we do anything to file, first we need to open the file we want to access. When we're done, it needs to be closed, so that resources that are tied with the file are freed. To open a file, lets specify a variable with the 'open' function.\n\nExample :\nfo = open('test.txt')\n\nIn this case, variable 'fo' is opening the 'test.txt' file, note that for this example the file is in the same directory as the python file. You can also specify a full path of 'test.txt' if you see it fits better for the progam. Once we're done with it, we need to close it using the 'close()' function.\n\n fo.close()\n\nYou can learn more about file operations here http://bit.ly/2FUqkWB",
    "reading_file" : "READING FILE\n\nSo we've opened the file, but we have not actually done anything with it. So lets read the content of 'test.txt'. To read a file, pass in the argument 'r' as the mode in the open function.\n\nExample :\nfo = open('test.txt','r')\n\nWe have opened the file 'test.txt' with read mode enabled. If we tried to print out its content, we will need to use the 'read()' function.\n\nfo.read()\n\nCongratulations, you just print out a content of a file using the 'read() function, now you can learn more http://bit.ly/2FUqkWB'",
    "writing_file" : "WRITING FILE\n\nYou read a file using python, thats neat but what about writing to it? Well of course you can! Python has 3 ways to write to a file and that is write, append and exclusive creation mode. We need to be careful with the write 'w' mode as it will overwrite into the file if it already exists. While using the append 'a' mode will just add data to and already existing file. Writing to a file we will need to use the 'write()' function.\n\nExample :\nfo = open('test.txt','w')\nfo.write('Hello World')\nfo.write({0} is awesome!)\n\nThe previous content is overwritten with the new content we have given. If we only wanted to add contents to a file, we will use the append mode. To learn more on writing to a file, click here http://bit.ly/2FUqkWB",
    "cl_arg" : "COMMAND LINE ARGUMENT\n\nWhen we run a python script, we type 'python filename' but we can also add arguments to that command. Python provides a function to read that argument to be passed in the program using the 'sys' module. By importing 'sys' and using 'sys.argv' (a list of command-line argument) we can read what to be passed in when running the program.\n\nExample :\nimport sys\n\nprint 'Arguments :', str(sys.argv[1])\n\nThat will print out all the arguments we passed in. If we run it 'python filename.py '{0}' now the output will be 'Arguments : {0}'. You can learn more about this over here http://bit.ly/2Dog770",
    "file_system" : "FILE SYSTEM\n\nYou can do lots of stuff with python, from creating files and deleting files and also directories. One important tip is that you always know where your program is going to be executed, so that you would not get an error. Using the 'os' module, we can do lots of things to the file system. One simple example is renaming a file, we will use the 'rename()' function from the 'os' module.\n\nExample :\nimport os\nos.rename('test.txt','new_test.txt')\n\nWe have succesfully rename the file 'test.txt' to 'new_test.txt'. Theres lots you can do with this, click here to learn more http://bit.ly/2BgdUF1",
    "csv_file" : "CSV FILE\n\nCSV stands for 'Comma Separated Value', it is used to store tabular data in plain text. Each line of the file is a data record. Each record consists of one or more fields, separated by commas. The first line of a csv is the Title of each column and the line below those are the value of title. See example here http://bit.ly/2DjC5UB\n\nTo manipulate a csv file, we will need to use the 'csv' module. You can learn how to use the module here http://bit.ly/2DkbAOX https://docs.python.org/3/library/csv.html",
    "json_file" : "JSON FILE\n\nJSON stands for 'JavaScript Object Notation', it is used to store objects in an unordered set of name/value pairs. Think of it like a dictionary, where the value is stored to a key/variable. The values stored can be anything, from objects, booleans, strings or numbers but the key must be in strings. See example here https://www.json.org/\n\nTo manipulate a json file, we will need to use the 'json' module. You can learn how to use the module here http://bit.ly/2mWo6OD http://docs.python-guide.org/en/latest/scenarios/json/"
  },
  "menu_option" : "Choose the available lessons :  \n + Opening File (open) \n + Reading File (read) \n + Writing File (write) \n +  Command Line Argument (clarg) \n +  File System (fsys) \n +  CSV File (csv) \n +  JSON File (json)",
  "description" : "FILE OPERATION\n\nIn this course, you will learn the basics of file operations in Python. We programmers need to store some data somewhere inside our program and have the ability to manipulate that data in ways that fit our needs. Good luck on your studies!"
}
